#! /usr/bin/env python3
import platform

from PyQt6.QtWidgets import *
from PyQt6 import uic
from PyQt6.QtCore import pyqtSlot,pyqtSignal
from PyQt6.QtGui import *
from PyQt6.QtWidgets import *
from PyQt6.QtCore import *
from PyQt6.QtWidgets import QGraphicsScene, QGraphicsView

from copy import deepcopy as copy
from PIL import Image
import pyzbar.pyzbar as zbar
from io import BytesIO
from cryptography.fernet import Fernet
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from pathlib import Path
from barcode import generate,Code128,writer
from pyzbar.pyzbar import decode
from PIL import Image
import shutil,csv,string,requests,time,sys,os,pyqrcode,base64,json,cairosvg,pyqrcode,random,pickle
from io import BytesIO,StringIO
from PIL.ImageQt import ImageQt
#import pyocr
#import pyocr.builders
import pytesseract,random
#local import
from qrtools import qrtools

if len(sys.argv) > 1:
    from client_model import HolzCraftsFrameEnum
else:
    	
	import json,os,sys,enum
	
	
	class HolzCraftsFrameEnum(enum.Enum):
		product_type=[('Frame', 'Frame'), ('Ornament', 'Ornament'), ('Name-Chain', 'Name-Chain'), ('Name-Tag', 'Name-Tag'), ('Oven-Rack Push-Pull', 'Oven-Rack Push-Pull'), ('Trophy', 'Trophy'), ('Cutting Board', 'Cutting Board'), ('Quick Conversion Stick', 'Quick Conversion Stick'), ('Generated_SKU', 'Generated_SKU'), ('Wall Deco/Plaque', 'Wall Deco/Plaque'), ('Wall Deco/Name Letters', 'Wall Deco/Name Letters'), ('Sign', 'Sign'), ('Python Code', 'Python Code'), ('HTML CODE', 'HTML CODE'), ('Spread Sheet', 'Spread Sheet'), ('SVG FILE', 'SVG FILE')]
		size=[('Other', 'Other'), ('Other-Check_Diameter', 'Other-Check_Diameter'), ('2x2', '2x2'), ('3x3', '3x3'), ('3x5', '3x5'), ('3.5x5', '3.5x5'), ('4x4', '4x4'), ('4x6', '4x6'), ('4x10', '4x10'), ('5x5', '5x5'), ('5x7', '5x7'), ('6x6', '6x6'), ('8x6', '8x6'), ('7x7', '7x7'), ('8x8', '8x8'), ('8x10', '8x10'), ('8.5x10', '8.5x10'), ('8x12', '8x12'), ('9x12', '9x12'), ('10x13', '10x13'), ('10x12', '10x12'), ('11x14', '11x14'), ('12x12', '12x12')]
		can_hold_glass=[('yes', 'yes'), ('no', 'no'), ('Other', 'Other')]
		has_glass=[('yes', 'yes'), ('no', 'no'), ('plexiglass', 'plexiglass'), ('lexan', 'lexan'), ('acrylic', 'acrylic'), ('Other', 'Other')]
		can_hold_canvas=[('yes', 'yes'), ('no', 'no'), ('Other', 'Other')]
		has_canvas=[('yes', 'yes'), ('no', 'no'), ('ChipBoard', 'ChipBoard'), ('masonite', 'masonite'), ('Other', 'Other')]
		orientation=[('portrait', 'portrait'), ('landscape', 'landscape'), ('Other', 'Other')]
		wood_type=[('maple', 'maple'), ('redwood', 'redwood'), ('red oak', 'red oak'), ('alder', 'alder'), ('poplar', 'poplar'), ('birch', 'birch'), ('fir', 'fir'), ('pine', 'pine'), ('oak', 'oak'), ('cherry', 'cherry'), ('walnut', 'walnut'), ('mahogany', 'mahogany'), ('cherry-redoak', 'cherry-redoak'), ('cherry-mahogany', 'cherry-mahogany'), ('cherry-walnut', 'cherry-walnut'), ('maple-walnut', 'maple-walnut'), ('maple-cherry', 'maple-cherry'), ('maple-mahogany', 'maple-mahogany'), ('constuction-lumber', 'constuction-lumber'), ('Other', 'Other'), ('Other(See Comments)', 'Other(See Comments)')]
		front_outer_profile=[('Chamfer', 'Chamfer'), ('Double Roman Ogee', 'Double Roman Ogee'), ('Classical', 'Classical'), ('Roman Ogee', 'Roman Ogee'), ('Cove', 'Cove'), ('Classical Cove', 'Classical Cove'), ('Round Over', 'Round Over'), ('Beading', 'Beading'), ('None', 'None'), ('Other', 'Other')]
		front_inner_profile=[('None', 'None'), ('Chamfer', 'Chamfer'), ('Other', 'Other')]
		rear_inner_profile=[('Round Over', 'Round Over'), ('Beading', 'Beading'), ('Chamfer', 'Chamfer'), ('None', 'None'), ('Other', 'Other')]
		center_inner_profile=[('Chamfer', 'Chamfer'), ('Double Roman Ogee', 'Double Roman Ogee'), ('Classical', 'Classical'), ('Roman Ogee', 'Roman Ogee'), ('Cove', 'Cove'), ('Classical Cove', 'Classical Cove'), ('Round Over', 'Round Over'), ('Beading', 'Beading'), ('None', 'None'), ('Other', 'Other')]
		center_outer_profile=[('Chamfer', 'Chamfer'), ('Double Roman Ogee', 'Double Roman Ogee'), ('Classical', 'Classical'), ('Roman Ogee', 'Roman Ogee'), ('Cove', 'Cove'), ('Classical Cove', 'Classical Cove'), ('Round Over', 'Round Over'), ('Beading', 'Beading'), ('None', 'None'), ('Other', 'Other')]
		finish_type=[('linseed', 'linseed'), ('chalk-paint', 'chalk-paint'), ('None', 'None'), ('Other', 'Other'), ('polyurathane-water gloss', 'polyurathane-water gloss'), ('polyurathane-water semi-gloss', 'polyurathane-water semi-gloss'), ('polyurathane-water satin', 'polyurathane-water satin'), ('polyurathane-water matte', 'polyurathane-water matte'), ('polyurathane-water Other', 'polyurathane-water Other'), ('polyurathane-oil gloss', 'polyurathane-oil gloss'), ('polyurathane-oil semi-gloss', 'polyurathane-oil semi-gloss'), ('polyurathane-oil satin', 'polyurathane-oil satin'), ('polyurathane-oil matte', 'polyurathane-oil matte'), ('polyurathane-oil Other', 'polyurathane-oil Other'), ('spar-urathane-water gloss', 'spar-urathane-water gloss'), ('spar-urathane-water semi-gloss', 'spar-urathane-water semi-gloss'), ('spar-urathane-water satin', 'spar-urathane-water satin'), ('spar-urathane-water matte', 'spar-urathane-water matte'), ('spar-urathane-water Other', 'spar-urathane-water Other'), ('spar-urathane-oil gloss', 'spar-urathane-oil gloss'), ('spar-urathane-oil semi-gloss', 'spar-urathane-oil semi-gloss'), ('spar-urathane-oil satin', 'spar-urathane-oil satin'), ('spar-urathane-oil matte', 'spar-urathane-oil matte'), ('spar-urathane-oil Other', 'spar-urathane-oil Other'), ('Other gloss', 'Other gloss'), ('Other semi-gloss', 'Other semi-gloss'), ('Other satin', 'Other satin'), ('Other matte', 'Other matte'), ('Other Other', 'Other Other')]
		stackable=[('yes', 'yes'), ('no', 'no'), ('Other', 'Other')]
		custom_engraved=[('yes', 'yes'), ('no', 'no'), ('Other', 'Other')]
		sold=[('yes', 'yes'), ('no', 'no'), ('Other', 'Other')]
		stainable=[('yes', 'yes'), ('no', 'no'), ('Other', 'Other')]
		sku=enum.auto()
		price=enum.auto()
		frame_shape=[('square', 'square'), ('hexagonal', 'hexagonal'), ('octoganal', 'octoganal'), ('Other', 'Other')]
		other_frame_size_diameter_unit=[('inch', 'inch'), ('foot', 'foot'), ('yard', 'yard'), ('centimeter', 'centimeter'), ('meter', 'meter'), ('millimeter', 'millimeter'), ('Other', 'Other')]
		item_weight_unit=[('lb', 'lb'), ('oz', 'oz'), ('gram', 'gram'), ('kg', 'kg')]
		item_weight=enum.auto()
		stain=enum.auto()
		comments=enum.auto()
		other_frame_size_diameter=enum.auto()
		sold_to=enum.auto()
		paid_for=[('yes', 'yes'), ('no', 'no'), ('Other', 'Other')]
		amount_paid=enum.auto()
		id=enum.auto()
		front=enum.auto()
	
		corner=enum.auto()
	
		rear=enum.auto()
	
		engraving_zip=enum.auto()
	
		def __fields__(self):
			return ['product_type', 'size', 'can_hold_glass', 'has_glass', 'can_hold_canvas', 'has_canvas', 'orientation', 'wood_type', 'front_outer_profile', 'front_inner_profile', 'rear_inner_profile', 'center_inner_profile', 'center_outer_profile', 'finish_type', 'stackable', 'custom_engraved', 'sold', 'stainable', 'sku', 'price', 'frame_shape', 'other_frame_size_diameter_unit', 'item_weight_unit', 'item_weight', 'stain', 'comments', 'other_frame_size_diameter', 'sold_to', 'paid_for', 'amount_paid', 'id']

class Signals(QObject):
    error=pyqtSignal(tuple)
    result=pyqtSignal(object)
    finished=pyqtSignal()
    stop=pyqtSignal()
    update=pyqtSignal(object)

class PollingWorker(QRunnable):
    '''worker thread'''
    def __init__(self,*args,**kwargs):
        super(PollingWorker,self).__init__()
        self.args=args
        self.kwargs=kwargs
        self.running=True
        self.signals=Signals()

    @pyqtSlot()
    def STOP(self):
        self.running=False

    @pyqtSlot()
    def run(self):
        self.signals.result.emit({})
        self.signals.update.emit('')
        self.signals.result.emit('')

class Window(QMainWindow,QWidget):
    @pyqtSlot()
    def stop_thread(self):
        print('stop thread')
        self.worker.signals.stop.emit()
    @pyqtSlot()
    def stop(self,worker):
        worker.running=False
    def update_results_values(self,rs):
        print(rs)
    def closeEvent(self, event):
        # do stuff
        print("attempting to stop closeEvent()")
        can_exit=True
        self.worker.signals.stop.emit()
        self.worker.signals.quit()
        if can_exit:
            event.accept() # let the window close
        else:
            event.ignore()
    def setup_external_worker(self):
        self.worker=PollingWorker()
        self.worker.signals.result.connect(self.update_results_values)
        self.worker.signals.update.connect(self.window.statusBar().showMessage)
    def aboutMe(self,x):
        print('About run()')
        msgBox = QMessageBox()
        #msgBox.setIcon(QMessageBox.Information)
        msgBox.setText("""HolcraftsAdminQt6 {version} for managing Holzcrafts.""".format(version=Path('version.txt').open('r').readline()))
        msgBox.setWindowTitle("Home2Bar About")
        returnValue = msgBox.exec()
    def engraving_zip(self):
        import_file=QFileDialog.getOpenFileName(filter="ZIP Files (*.zip);;Tar Files (*.tar);; XZ Files(*.xz);;GZ Files(*.gz);;All Files(*)")
        print(import_file)
        if import_file[0]:
            self.window.engraving_zip.setText(import_file[0])
    def front(self):
        import_file=QFileDialog.getOpenFileName(filter="PNG Files (*.png *.PNG);;JPG Files (*.jpg *.jpeg *.JPG *.JPEG);;All Files(*)")
        print(import_file)
        if import_file[0]:
            self.window.front.setText(import_file[0])
    def corner(self):
        import_file=QFileDialog.getOpenFileName(filter="PNG Files (*.png *.PNG);;JPG Files (*.jpg *.jpeg *.JPG *.JPEG);;All Files(*)")
        print(import_file)
        if import_file[0]:
            self.window.corner.setText(import_file[0])
    def rear(self):
        import_file=QFileDialog.getOpenFileName(filter="PNG Files (*.png *.PNG);;JPG Files (*.jpg *.jpeg *.JPG *.JPEG);;All Files(*)")
        print(import_file)
        if import_file[0]:
            self.window.rear.setText(import_file[0])
    def refresh_sku(self):
        self.window.statusBar().showMessage("refreshing sku!")
        self.window.sku.setText(self.generate_sku())
    def saveOnServer(self):
        JSON=dict(
        product_type=self.window.product_type.currentText(),
        size=self.window.size.currentText(),
        can_hold_glass=self.window.can_hold_glass.currentText(),
        has_glass=self.window.has_glass.currentText(),
        can_hold_canvas=self.window.can_hold_glass.currentText(),
        has_canvas=self.window.has_canvas.currentText(),
        orientation=self.window.orientation.currentText(),
        wood_type=self.window.wood_type.currentText(),
        frame_shape=self.window.frame_shape.currentText(),
        stainable=self.window.stainable.currentText(),
        stackable=self.window.stackable.currentText(),
        finish_type=self.window.finish_type.currentText(),
        center_outer_profile=self.window.center_outer_profile.currentText(),
        sold=self.window.sold.currentText(),
        center_inner_profile=self.window.center_inner_profile.currentText(),
        rear_inner_profile=self.window.rear_inner_profile.currentText(),
        front_inner_profile=self.window.front_inner_profile.currentText(),
        front_outer_profile=self.window.front_outer_profile.currentText(),
        comments=self.window.comments.toPlainText(),
        custom_engraved=self.window.custom_engraved.currentText(),
        engraving_zip=self.window.engraving_zip.text(),
        rear=self.window.rear.text(),
        corner=self.window.corner.text(),
        front=self.window.front.text(),
        item_weight=self.window.item_weight.value(),
        item_weight_unit=self.window.item_weight_unit.currentText(),
        price=self.window.price.value(),
        other_frame_size_diameter=self.window.other_frame_size_diameter.value(),
        other_frame_size_diameter_unit=self.window.other_frame_size_diameter_unit.currentText(),
        stain=self.window.stain.text(),
        sold_to=self.window.sold_to.text(),
        sku=self.window.sku.text()
        )
        print(JSON)
        files={
            'rear':JSON['rear'],
            'corner':JSON['corner'],
            'front':JSON['front'],
            'engraving_zip':JSON['engraving_zip']
        }
        counter=0
        sendFile={}
        for key in files.keys():
            if files[key]:
                print(files[key])
                try:
                    sendFile[key]=open(files[key],'rb')
                except Exception as e:
                    self.statusBar().showMessage(str(e)+":"+files[key])

        #token='1cd0130cc8870ddc77abd1b08df634c2ba46ea01'
        #address='http://127.0.0.1:8000/holzcraftsframes/new_frame/'
        address=self.window.server.text()+'/holzcraftsframes/new_frame/'
        token=self.window.token.text()
        if len(sendFile) > 0:
            response=requests.post(address,files=sendFile,data=JSON,headers={'Authorization':'Token {}'.format(token)})
        else:
            response=requests.post(address,data=JSON,headers={'Authorization':'Token {}'.format(token)})
        print(response)
        self.window.statusBar().showMessage(str(response))
        if self.window.reset_when_done.isChecked():
            self.window.comments.setPlainText('')
            self.window.engraving_zip.setText('')
            self.window.rear.setText('')
            self.window.corner.setText('')
            self.window.front.setText('')
            self.window.price.setValue(0)
            self.window.other_frame_size_diameter.setValue(0)
            self.window.item_weight.setValue(0)
            self.window.stain.setText('')
            self.window.sold_to.setText('')
            self.window.statusBar().showMessage("reset when done completed!")
        if self.window.new_sku_when_done.isChecked():
            self.refresh_sku()
            self.window.statusBar().showMessage("refreh_sku()")
        self.window.statusBar().showMessage(str(response)+str(response.json()))
    def setup_buttons(self):
        self.window.browse_engraving_zip.clicked.connect(self.engraving_zip)
        '''self.window.browse_#munge#.clicked.connect(self.#munge#)'''
        self.window.browse_front.clicked.connect(self.front)
        self.window.browse_rear.clicked.connect(self.rear)
        self.window.browse_corner.clicked.connect(self.corner)
        self.window.new_sku.clicked.connect(self.refresh_sku)
        self.window.save_new_product.clicked.connect(self.saveOnServer)
        self.window.save_settings.clicked.connect(self.save_settings)
        self.window.actionAbout.triggered.connect(self.aboutMe)
        self.window.search.clicked.connect(self.search)
        self.window.results.clicked.connect(self.item_edit)
        self.window_2.update_server.clicked.connect(self.update_item)
        self.window_2.engraving_zip_download.clicked.connect(self.engraving_zip_download)
        self.window_2.corner_download.clicked.connect(self.corner_download)
        self.window_2.rear_download.clicked.connect(self.rear_download)
        self.window_2.front_download.clicked.connect(self.front_download)
    def engraving_zip_download(self):
        try:
            with open(self.window_2.engraving_zip.text(),'wb') as file:
                file.write(base64.b64decode(self.file_engraving_zip.get('file')))
        except Exception as e:
            print(e)
            self.window.statusBar().showMessage(str(e))
    def front_download(self):
        try:
            with open(self.window_2.front.text(),'wb') as file:
                file.write(base64.b64decode(self.file_front.get('file')))
        except Exception as e:
            print(e)
            self.window.statusBar().showMessage(str(e))
    def rear_download(self):
        try:
            with open(self.window_2.rear.text(),'wb') as file:
                file.write(base64.b64decode(self.file_rear.get('file')))
        except Exception as e:
            print(e)
            self.window.statusBar().showMessage(str(e))
    def corner_download(self):
        try:
            with open(self.window_2.corner.text(),'wb') as file:
                file.write(base64.b64decode(self.file_corner.get('file')))
        except Exception as e:
            print(e)
            self.window.statusBar().showMessage(str(e))
    def update_engraving_zip(self):
        objectInfo=self.window.results.currentItem().text()
        object_id=int(objectInfo.split(':')[1])
        try:
            if Path(self.window_2.engraving_zip.text()).exists():
                with open(self.window_2.engraving_zip.text(),'rb') as file:
                    response=requests.post("{server}/holzcraftsframes/update_files_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':object_id,'name':self.window_2.engraving_zip.text(),'file':base64.b64encode(file.read()).decode('utf-8'),'which':'engraving_zip'})
                    print(response)
                    self.window.statusBar().showMessage(str(response))
        except Exception as e:
            print(e)
            self.window.statusBar().showMessage(str(e))
    def update_front(self):
        objectInfo=self.window.results.currentItem().text()
        object_id=int(objectInfo.split(':')[1])
        try:
            if Path(self.window_2.front.text()).exists():
                with open(self.window_2.front.text(),'rb') as file:
                    response=requests.post("{server}/holzcraftsframes/update_files_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':object_id,'name':self.window_2.front.text(),'file':base64.b64encode(file.read()).decode('utf-8'),'which':'front'})
                    print(response)
                    self.window.statusBar().showMessage(str(response))
        except Exception as e:
            print(e)
            self.window.statusBar().showMessage(str(e))
    def update_rear(self):
        objectInfo=self.window.results.currentItem().text()
        object_id=int(objectInfo.split(':')[1])
        try:
            if Path(self.window_2.rear.text()).exists():
                with open(self.window_2.rear.text(),'rb') as file:
                    response=requests.post("{server}/holzcraftsframes/update_files_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':object_id,'name':self.window_2.rear.text(),'file':base64.b64encode(file.read()).decode('utf-8'),'which':'rear'})
                    print(response)
                    self.window.statusBar().showMessage(str(response))
        except Exception as e:
            print(e)
            self.window.statusBar().showMessage(str(e))
    def update_corner(self):
        objectInfo=self.window.results.currentItem().text()
        object_id=int(objectInfo.split(':')[1])
        try:
            if Path(self.window_2.corner.text()).exists():
                with open(self.window_2.corner.text(),'rb') as file:
                    response=requests.post("{server}/holzcraftsframes/update_files_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':object_id,'name':self.window_2.corner.text(),'file':base64.b64encode(file.read()).decode('utf-8'),'which':'corner'})
                    print(response)
                    self.window.statusBar().showMessage(str(response))
        except Exception as e:
            print(e)
            self.window.statusBar().showMessage(str(e))
    def delete_item(self,button):
        response=requests.post("{server}/holzcraftsframes/delete_item_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':int(self.window.results.currentItem().text().split(":")[1])})
        self.window_2.close()
        self.search(None)
    def delete_engraving_zip(self):
        response=requests.post("{server}/holzcraftsframes/delete_files_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':int(self.window.results.currentItem().text().split(":")[1]),'which':'engraving_zip'})
        print(response)
        self.window.statusBar().showMessage(str(response))
        self.window_2.engraving_zip.setText('')
    def delete_front(self):
        response=requests.post("{server}/holzcraftsframes/delete_files_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':int(self.window.results.currentItem().text().split(":")[1]),'which':'front'})
        print(response)
        self.window.statusBar().showMessage(str(response))
        self.window_2.front.setText('')
    def delete_rear(self):
        response=requests.post("{server}/holzcraftsframes/delete_files_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':int(self.window.results.currentItem().text().split(":")[1]),'which':'rear'})
        print(response)
        self.window.statusBar().showMessage(str(response))
        self.window_2.rear.setText('')
    def delete_corner(self):
        response=requests.post("{server}/holzcraftsframes/delete_files_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':int(self.window.results.currentItem().text().split(":")[1]),'which':'corner'})
        print(response)
        self.window.statusBar().showMessage(str(response))
        self.window_2.corner.setText('')
    def item_edit(self):
        currentItem=self.window.results.currentItem()
        id=currentItem.text().split(':')[1]
        response=requests.post('{server}/holzcraftsframes/get_id/'.format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':int(id)})
        print(response.json())
        JSON=response.json()
        for key in JSON.keys():
            if key != 'id':
                widget=self.window_2.__dict__[key]
                print(key,'&^&'*4,JSON[key])
                if type(widget) is QComboBox:
                    #text=widget.currentText()
                    #name=widget.objectName()[:-2]
                    #data['{}__icontains'.format(name)]=text
                    #widget.setCurrentText(json[key])
                    widget.setCurrentIndex(widget.findText(JSON[key]))
                elif type(widget) is QLineEdit:
                    #text=widget.text()
                    #name=widget.objectName()[:-2]
                    #data['{}__icontains'.format(name)]=text
                    widget.setText(JSON[key])
                elif type(widget) is QDoubleSpinBox:
                    #text=widget.value()
                    #name=widget.objectName()[:-2]
                    #data['{}__icontains'.format(name)]=text
                    if not JSON[key]:
                        JSON[key]=-1
                    widget.setValue(float(JSON[key]))
                elif type(widget) is QPlainTextEdit:
                    #text=widget.toPlainText()
                    #name=widget.objectName()[:-2]
                    #data['{}__icontains'.format(name)]=text
                    widget.setPlainText(JSON[key])

        #this section should be put into ray
        #engraving_zip
        QMessageBox.about(self,'Downloading Files','engraving_zip will be downloaded!')
        response=requests.post("{server}/holzcraftsframes/get_files_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':int(id),'file':'engraving_zip'})
        content=b''
        for chunk in response.iter_content(chunk_size=512*1024):
            content+=chunk
        self.file_engraving_zip=json.loads(content.decode('utf-8'))
        self.window_2.engraving_zip.setText(self.file_engraving_zip.get('name'))

        QMessageBox.about(self,'Downloading Files','rear will be downloaded!')
        response=requests.post("{server}/holzcraftsframes/get_files_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':int(id),'file':'rear'})
        content=b''
        for chunk in response.iter_content(chunk_size=512*1024):
            content+=chunk
        self.file_rear=json.loads(content.decode('utf-8'))
        self.window_2.rear.setText(self.file_rear.get('name'))

        QMessageBox.about(self,'Downloading Files','front will be downloaded!')
        response=requests.post("{server}/holzcraftsframes/get_files_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':int(id),'file':'front'})
        content=b''
        for chunk in response.iter_content(chunk_size=512*1024):
            content+=chunk
        self.file_front=json.loads(content.decode('utf-8'))
        self.window_2.front.setText(self.file_front.get('name'))

        QMessageBox.about(self,'Downloading Files','corner will be downloaded!')
        response=requests.post("{server}/holzcraftsframes/get_files_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':int(id),'file':'corner'})
        content=b''
        for chunk in response.iter_content(chunk_size=512*1024):
            content+=chunk
        self.file_corner=json.loads(content.decode('utf-8'))
        self.window_2.corner.setText(self.file_corner.get('name'))

        print(content,'JSON')
        self.setup_asQRTab()
        self.window_2.exec()
    def setup_search(self):
        #self.search_fields=['{}_c'.format(i.name) for i in HolzCraftsFrameEnum if not i.name.startswith('__') and i.name not in ['rear','front','engraving_zip','corner']]
        #for i in self.search_fields:
        #    self.window.__dict__.get(i).stateChanged.connect(self.enabler)
        for i in HolzCraftsFrameEnum.__fields__(HolzCraftsFrameEnum):
            if i != 'id':
                ii='{}_2'.format(i)
                i='{}_c'.format(i)
                print(ii)
                self.window.__dict__.get(ii).setEnabled(False)
                self.window.__dict__.get(i).stateChanged.connect(self.enabler)
    @pyqtSlot()
    def enabler(self):
        cb=self.sender()
        name=cb.objectName()
        name='{}_2'.format(name[:-2])
        print(name)
        self.window.__dict__.get(name).setEnabled(cb.isChecked())
    def search(self,btn):
        fields=['{}_2'.format(i) for i in dir(HolzCraftsFrameEnum) if not i.startswith('__') and i not in ['id','rear','front','engraving_zip','corner']]
        widgets=[]
        for i in fields:
            widgets.append(self.window.__dict__.get(i))
        data={}
        for widget in widgets:
            if widget.isEnabled():
                if type(widget) is QComboBox:
                    text=widget.currentText()
                    name=widget.objectName()[:-2]
                    data['{}__icontains'.format(name)]=text
                elif type(widget) is QLineEdit:
                    text=widget.text()
                    name=widget.objectName()[:-2]
                    data['{}__icontains'.format(name)]=text
                elif type(widget) is QDoubleSpinBox:
                    text=widget.value()
                    name=widget.objectName()[:-2]
                    data['{}__icontains'.format(name)]=text
                elif type(widget) is QPlainTextEdit:
                    text=widget.toPlainText()
                    name=widget.objectName()[:-2]
                    data['{}__icontains'.format(name)]=text
        print(data)
        uri=self.window.server.text()+'/holzcraftsframes/searchEP/'
        print(uri)
        response=requests.post(uri,headers={'Authorization':'Token {}'.format(self.window.token.text())},json=data)
        json=response.json()
        print(json)
        #for i in range(self.window.results.count()):
        #    self.window.results.takeItem(i)
        self.window.results.clear()
        for num,key in enumerate(json):
            print(key)
            self.window.results.addItem(
            '{sku}:{id}:{product_type}'.format(
            sku=json[num].get('sku'),
            product_type=json[num].get("product_type"),
            id=json[num].get('id')
            )
            )
        print(len(json))
    def save_settings(self):
        with open('settings.cfg','wb') as saved:
            settings=dict(token=self.window.token.text(),server=self.window.server.text())
            pickle.dump(settings,saved)
        self.window.statusBar().showMessage('settings saved!')
    def load_settings(self):
        try:
            with open('settings.cfg','rb') as settings:
                settled=pickle.load(settings)
                self.window.token.setText(settled.get('token'))
                self.window.server.setText(settled.get('server'))
                self.window.statusBar().showMessage('settings loaded!')
        except Exception as e:
            print(e)
            self.window.statusBar().showMessage(str(e)+":settings was not loaded")
    def run_pollthread(self):
        self.setup_external_worker()
        self.threadpool.start(self.worker)
    def setup_comboBoxes2(self):
        def product_type(self):
            for value in HolzCraftsFrameEnum.product_type.value:
                self.window.product_type_2.addItem(value[0])
        def size(self):
            for value in HolzCraftsFrameEnum.size.value:
                self.window.size_2.addItem(value[0])
        def can_hold_glass(self):
            for value in HolzCraftsFrameEnum.can_hold_glass.value:
                self.window.can_hold_glass_2.addItem(value[0])
        def can_hold_canvas(self):
            for value in HolzCraftsFrameEnum.can_hold_canvas.value:
                self.window.can_hold_canvas_2.addItem(value[0])
        def has_glass(self):
            for value in HolzCraftsFrameEnum.has_glass.value:
                self.window.has_glass_2.addItem(value[0])
        def has_canvas(self):
            for value in HolzCraftsFrameEnum.has_canvas.value:
                self.window.has_canvas_2.addItem(value[0])
        def orientation(self):
            for value in HolzCraftsFrameEnum.orientation.value:
                self.window.orientation_2.addItem(value[0])
        def wood_type(self):
            for value in HolzCraftsFrameEnum.wood_type.value:
                self.window.wood_type_2.addItem(value[0])
        '''
        def #munge#(self):
            for value in HolzCraftsFrameEnum.#munge#.value:
                self.window.#munge#.addItem(value[0])
        '''
        def front_outer_profile(self):
            for value in HolzCraftsFrameEnum.front_outer_profile.value:
                self.window.front_outer_profile_2.addItem(value[0])
        def front_inner_profile(self):
            for value in HolzCraftsFrameEnum.front_inner_profile.value:
                self.window.front_inner_profile_2.addItem(value[0])
        def rear_inner_profile(self):
            for value in HolzCraftsFrameEnum.rear_inner_profile.value:
                self.window.rear_inner_profile_2.addItem(value[0])
        def center_inner_profile(self):
            for value in HolzCraftsFrameEnum.center_inner_profile.value:
                self.window.center_inner_profile_2.addItem(value[0])
        def center_outer_profile(self):
            for value in HolzCraftsFrameEnum.center_outer_profile.value:
                self.window.center_outer_profile_2.addItem(value[0])
        def finish_type(self):
            for value in HolzCraftsFrameEnum.finish_type.value:
                self.window.finish_type_2.addItem(value[0])
        def stackable(self):
            for value in HolzCraftsFrameEnum.stackable.value:
                self.window.stackable_2.addItem(value[0])
        def custom_engraved(self):
            for value in HolzCraftsFrameEnum.custom_engraved.value:
                self.window.custom_engraved_2.addItem(value[0])
        def sold(self):
            for value in HolzCraftsFrameEnum.sold.value:
                self.window.sold_2.addItem(value[0])
        def stainable(self):
            for value in HolzCraftsFrameEnum.stainable.value:
                self.window.stainable_2.addItem(value[0])
        def frame_shape(self):
            for value in HolzCraftsFrameEnum.frame_shape.value:
                self.window.frame_shape_2.addItem(value[0])
        def other_frame_size_diameter_unit(self):
            for value in HolzCraftsFrameEnum.other_frame_size_diameter_unit.value:
                self.window.other_frame_size_diameter_unit_2.addItem(value[0])
        def item_weight_unit(self):
            for value in HolzCraftsFrameEnum.item_weight_unit.value:
                self.window.item_weight_unit_2.addItem(value[0])
        def paid_for(self):
            for value in HolzCraftsFrameEnum.paid_for.value:
                self.window.paid_for_2.addItem(value[0])

        def init(self):
            product_type(self)
            size(self)
            can_hold_glass(self)
            can_hold_canvas(self)
            has_glass(self)
            has_canvas(self)
            orientation(self)
            wood_type(self)
            front_outer_profile(self)
            front_inner_profile(self)
            rear_inner_profile(self)
            center_inner_profile(self)
            center_outer_profile(self)
            finish_type(self)
            stackable(self)
            custom_engraved(self)
            sold(self)
            stainable(self)
            frame_shape(self)
            other_frame_size_diameter_unit(self)
            item_weight_unit(self)
            paid_for(self)
        init(self)
    def setup_comboBoxes(self):
        def product_type(self):
            for value in HolzCraftsFrameEnum.product_type.value:
                self.window.product_type.addItem(value[0])
        def size(self):
            for value in HolzCraftsFrameEnum.size.value:
                self.window.size.addItem(value[0])
        def can_hold_glass(self):
            for value in HolzCraftsFrameEnum.can_hold_glass.value:
                self.window.can_hold_glass.addItem(value[0])
        def can_hold_canvas(self):
            for value in HolzCraftsFrameEnum.can_hold_canvas.value:
                self.window.can_hold_canvas.addItem(value[0])
        def has_glass(self):
            for value in HolzCraftsFrameEnum.has_glass.value:
                self.window.has_glass.addItem(value[0])
        def has_canvas(self):
            for value in HolzCraftsFrameEnum.has_canvas.value:
                self.window.has_canvas.addItem(value[0])
        def orientation(self):
            for value in HolzCraftsFrameEnum.orientation.value:
                self.window.orientation.addItem(value[0])
        def wood_type(self):
            for value in HolzCraftsFrameEnum.wood_type.value:
                self.window.wood_type.addItem(value[0])
        '''
        def #munge#(self):
            for value in HolzCraftsFrameEnum.#munge#.value:
                self.window.#munge#.addItem(value[0])
        '''
        def front_outer_profile(self):
            for value in HolzCraftsFrameEnum.front_outer_profile.value:
                self.window.front_outer_profile.addItem(value[0])
        def front_inner_profile(self):
            for value in HolzCraftsFrameEnum.front_inner_profile.value:
                self.window.front_inner_profile.addItem(value[0])
        def rear_inner_profile(self):
            for value in HolzCraftsFrameEnum.rear_inner_profile.value:
                self.window.rear_inner_profile.addItem(value[0])
        def center_inner_profile(self):
            for value in HolzCraftsFrameEnum.center_inner_profile.value:
                self.window.center_inner_profile.addItem(value[0])
        def center_outer_profile(self):
            for value in HolzCraftsFrameEnum.center_outer_profile.value:
                self.window.center_outer_profile.addItem(value[0])
        def finish_type(self):
            for value in HolzCraftsFrameEnum.finish_type.value:
                self.window.finish_type.addItem(value[0])
        def stackable(self):
            for value in HolzCraftsFrameEnum.stackable.value:
                self.window.stackable.addItem(value[0])
        def custom_engraved(self):
            for value in HolzCraftsFrameEnum.custom_engraved.value:
                self.window.custom_engraved.addItem(value[0])
        def sold(self):
            for value in HolzCraftsFrameEnum.sold.value:
                self.window.sold.addItem(value[0])
        def stainable(self):
            for value in HolzCraftsFrameEnum.stainable.value:
                self.window.stainable.addItem(value[0])
        def frame_shape(self):
            for value in HolzCraftsFrameEnum.frame_shape.value:
                self.window.frame_shape.addItem(value[0])
        def other_frame_size_diameter_unit(self):
            for value in HolzCraftsFrameEnum.other_frame_size_diameter_unit.value:
                self.window.other_frame_size_diameter_unit.addItem(value[0])
        def item_weight_unit(self):
            for value in HolzCraftsFrameEnum.item_weight_unit.value:
                self.window.item_weight_unit.addItem(value[0])
        def paid_for(self):
            for value in HolzCraftsFrameEnum.paid_for.value:
                self.window.paid_for.addItem(value[0])

        def init(self):
            product_type(self)
            size(self)
            can_hold_glass(self)
            can_hold_canvas(self)
            has_glass(self)
            has_canvas(self)
            orientation(self)
            wood_type(self)
            front_outer_profile(self)
            front_inner_profile(self)
            rear_inner_profile(self)
            center_inner_profile(self)
            center_outer_profile(self)
            finish_type(self)
            stackable(self)
            custom_engraved(self)
            sold(self)
            stainable(self)
            frame_shape(self)
            other_frame_size_diameter_unit(self)
            item_weight_unit(self)
        init(self)
        paid_for(self)
        self.setup_comboBoxes2()
        self.setup_comboBoxes3()
    ##start editor functions
    def update_item(self,button):
        btn=self.sender()
        objectInfo=self.window.results.currentItem().text()
        object_id=int(objectInfo.split(':')[1])
        response=requests.post("{server}/holzcraftsframes/get_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json={'id':object_id})
        original=response.json()
        new_code=copy(original)
        print(original,response,objectInfo)
        for key in original.keys():
            widget=self.window_2.__dict__.get(key)
            if type(widget) is QComboBox:
                new_code[key]=widget.currentText()
            elif type(widget) is QLineEdit:
                new_code[key]=widget.text()
            elif type(widget) is QDoubleSpinBox:
                new_code[key]=widget.value()
            elif type(widget) is QPlainTextEdit:
                new_code[key]=widget.toPlainText()
            else:
                print('{widget} is not useable'.format(widget=widget))
                print(widget)
            print(new_code)
        new_code['id']=object_id
        response=requests.post("{server}/holzcraftsframes/update_id/".format(server=self.window.server.text()),headers={'Authorization':'Token {}'.format(self.window.token.text())},json=new_code)
        self.statusBar().showMessage(str(response))
    def get_engraving_zip(self):
        import_file=QFileDialog.getOpenFileName(filter="ZIP Files (*.zip);;Tar Files (*.tar);; XZ Files(*.xz);;GZ Files(*.gz);;All Files(*)")
        print(import_file)
        if import_file[0]:
            self.window_2.engraving_zip.setText(import_file[0])
    def get_rear(self):
        import_file=QFileDialog.getOpenFileName(filter="PNG Files (*.png *.PNG);;JPEG/JPG Files(*.jpg *.JPG *.jpeg *.JPEG);;All Files(*)")
        print(import_file)
        if import_file[0]:
            self.window_2.rear.setText(import_file[0])
    def get_front(self):
        import_file=QFileDialog.getOpenFileName(filter="PNG Files (*.png *.PNG);;JPEG/JPG Files(*.jpg *.JPG *.jpeg *.JPEG);;All Files(*)")
        print(import_file)
        if import_file[0]:
            self.window_2.front.setText(import_file[0])
    def get_corner(self):
        import_file=QFileDialog.getOpenFileName(filter="PNG Files (*.png *.PNG);;JPEG/JPG Files(*.jpg *.JPG *.jpeg *.JPEG);;All Files(*)")
        print(import_file)
        if import_file[0]:
            self.window_2.corner.setText(import_file[0])
    def setup_editor(self):
        self.window_2.browse_engraving_zip.clicked.connect(self.get_engraving_zip)
        self.window_2.browse_rear.clicked.connect(self.get_rear)
        self.window_2.browse_corner.clicked.connect(self.get_corner)
        self.window_2.browse_front.clicked.connect(self.get_front)
        self.window_2.update_engraving_zip.clicked.connect(self.update_engraving_zip)
        self.window_2.update_rear.clicked.connect(self.update_rear)
        self.window_2.update_corner.clicked.connect(self.update_corner)
        self.window_2.update_front.clicked.connect(self.update_front)
        self.window_2.new_sku.clicked.connect(self.refresh_sku_existing)
        self.window_2.delete_engraving_zip.clicked.connect(self.delete_engraving_zip)
        self.window_2.delete_front.clicked.connect(self.delete_front)
        self.window_2.delete_rear.clicked.connect(self.delete_rear)
        self.window_2.delete_corner.clicked.connect(self.delete_corner)
        self.window_2.delete_item.clicked.connect(self.delete_item)
        self.window_2.browse_qr_save_location.clicked.connect(self.get_qr_save_location)
        self.window_2.save_qrcode.clicked.connect(self.save_qr_code)
    def save_qr_code(self,button):
        self.im.save(self.window_2.qr_save_location.text())
        self.window.statusBar().showMessage("saved {}!".format(self.window_2.qr_save_location.text()))
    def get_qr_save_location(self,button):
            import_file=QFileDialog.getSaveFileName(filter="PNG Files(*.png);;All Files(*)")
            print(import_file)
            if import_file[0]:
                self.window_2.qr_save_location.setText(import_file[0])
    def setup_asQRTab(self):
        sender=self.sender()
        id=self.window.results.currentItem().text().split(':')[1]
        self.window_2.qr_save_location.setText(self.window_2.qr_save_location.text().format(sku=id))
        response=requests.post("{server}/holzcraftsframes/get_id/".format(server=self.window.server.text()),headers={"Authorization":"Token {}".format(self.window.token.text())},json={'id':id})
        data=json.dumps(response.json())
        bios=StringIO()
        bios.write(data)
        bios.seek(0)
        self.generate_QR(bios.read())
    def generate_QR(self,code):
        tmp=code
        skip_next=False
        codeio=BytesIO()

        code=pyqrcode.create(tmp)
        try:
            #code.svg(code_name+'.svg',scale=8)
            code.png(codeio,scale=4)
            view=self.window_2.findChild(QGraphicsView,'as_view')
            #z.write(tmp)
            codeio.seek(0)
            #pix = QPixmap()

            self.im=Image.open(codeio)
            self.im.convert("RGBA")

            #im=im.resize([int(view.sceneRect().height()),int(view.sceneRect().width())])
            self.data=self.im.tobytes()
            #qim=QImage(data,im.size[0],im.size[1],QImage.Format.Format_ARGB32)
            self.qim=ImageQt(self.im)
            self.pix=QPixmap().fromImage(self.qim)
            self.scene=QGraphicsScene()
            #scene.setSceneRect(SceneRect())
            self.scene.addPixmap(self.pix)
            view.setScene(self.scene)
        except Exception as e:
            print(e)
            skip_next=True
    def refresh_sku_existing(self,button):
        self.window_2.sku.setText(self.generate_sku())
    ##stop editor functions
    @pyqtSlot()
    def enable_editor(self):
        print("enabler")
        self.window_2.area.setEnabled(self.sender().isChecked())
    def setup_comboBoxes3(self):
        self.window_2.edit.stateChanged.connect(self.enable_editor)
        def product_type(self):
            for value in HolzCraftsFrameEnum.product_type.value:
                self.window_2.product_type.addItem(value[0])
        def size(self):
            for value in HolzCraftsFrameEnum.size.value:
                self.window_2.size.addItem(value[0])
        def can_hold_glass(self):
            for value in HolzCraftsFrameEnum.can_hold_glass.value:
                self.window_2.can_hold_glass.addItem(value[0])
        def can_hold_canvas(self):
            for value in HolzCraftsFrameEnum.can_hold_canvas.value:
                self.window_2.can_hold_canvas.addItem(value[0])
        def has_glass(self):
            for value in HolzCraftsFrameEnum.has_glass.value:
                self.window_2.has_glass.addItem(value[0])
        def has_canvas(self):
            for value in HolzCraftsFrameEnum.has_canvas.value:
                self.window_2.has_canvas.addItem(value[0])
        def orientation(self):
            for value in HolzCraftsFrameEnum.orientation.value:
                self.window_2.orientation.addItem(value[0])
        def wood_type(self):
            for value in HolzCraftsFrameEnum.wood_type.value:
                self.window_2.wood_type.addItem(value[0])
        '''
        def #munge#(self):
            for value in HolzCraftsFrameEnum.#munge#.value:
                self.window_2.#munge#.addItem(value[0])
        '''
        def front_outer_profile(self):
            for value in HolzCraftsFrameEnum.front_outer_profile.value:
                self.window_2.front_outer_profile.addItem(value[0])
        def front_inner_profile(self):
            for value in HolzCraftsFrameEnum.front_inner_profile.value:
                self.window_2.front_inner_profile.addItem(value[0])
        def rear_inner_profile(self):
            for value in HolzCraftsFrameEnum.rear_inner_profile.value:
                self.window_2.rear_inner_profile.addItem(value[0])
        def center_inner_profile(self):
            for value in HolzCraftsFrameEnum.center_inner_profile.value:
                self.window_2.center_inner_profile.addItem(value[0])
        def center_outer_profile(self):
            for value in HolzCraftsFrameEnum.center_outer_profile.value:
                self.window_2.center_outer_profile.addItem(value[0])
        def finish_type(self):
            for value in HolzCraftsFrameEnum.finish_type.value:
                self.window_2.finish_type.addItem(value[0])
        def stackable(self):
            for value in HolzCraftsFrameEnum.stackable.value:
                self.window_2.stackable.addItem(value[0])
        def custom_engraved(self):
            for value in HolzCraftsFrameEnum.custom_engraved.value:
                self.window_2.custom_engraved.addItem(value[0])
        def sold(self):
            for value in HolzCraftsFrameEnum.sold.value:
                self.window_2.sold.addItem(value[0])
        def stainable(self):
            for value in HolzCraftsFrameEnum.stainable.value:
                self.window_2.stainable.addItem(value[0])
        def frame_shape(self):
            for value in HolzCraftsFrameEnum.frame_shape.value:
                self.window_2.frame_shape.addItem(value[0])
        def other_frame_size_diameter_unit(self):
            for value in HolzCraftsFrameEnum.other_frame_size_diameter_unit.value:
                self.window_2.other_frame_size_diameter_unit.addItem(value[0])
        def item_weight_unit(self):
            for value in HolzCraftsFrameEnum.item_weight_unit.value:
                self.window_2.item_weight_unit.addItem(value[0])
        def paid_for(self):
            for value in HolzCraftsFrameEnum.paid_for.value:
                self.window_2.paid_for.addItem(value[0])
        def init(self):
            product_type(self)
            size(self)
            can_hold_glass(self)
            can_hold_canvas(self)
            has_glass(self)
            has_canvas(self)
            orientation(self)
            wood_type(self)
            front_outer_profile(self)
            front_inner_profile(self)
            rear_inner_profile(self)
            center_inner_profile(self)
            center_outer_profile(self)
            finish_type(self)
            stackable(self)
            custom_engraved(self)
            sold(self)
            stainable(self)
            frame_shape(self)
            other_frame_size_diameter_unit(self)
            item_weight_unit(self)
            paid_for(self)
        init(self)
    def setup_lineEdits(self):
        def sku(self):
            self.window.sku.setText(self.generate_sku())
        sku(self)
    def generate_sku(self):
        tmp=[]
        for i in range(0,12):
            tmp.append(str(random.randint(0,9)))
        return ''.join(tmp)
    def setIconWindow(self):
        bits=base64.b64decode(self.icon)
        pixmap=QPixmap()
        pixmap.loadFromData(bits)
        icon=QIcon(pixmap)
        self.window.setWindowIcon(icon)
    def __init__(self,parent=None):
        self.file_corner=None
        self.file_rear=None
        self.file_front=None
        self.file_engraving_zip=None
        if os.geteuid() == 0:
            self.window=uic.loadUi("main.ui")
            exit("you should not be root!")
        self.app=QApplication(sys.argv)
        super().__init__()
        if len(sys.argv) > 1:
            if sys.argv[1] == 'debug':
                self.window=uic.loadUi("main.ui")
                self.window_2=uic.loadUi("itemui.ui")
            else:
                self.window=uic.loadUi(StringIO(base64.b64decode(self.ui).decode('utf-8')))
                self.window_2=uic.loadUi(StringIO(base64.b64decode(self.itemui).decode('utf-8')))
                self.setIconWindow()
        else:
            self.window=uic.loadUi(StringIO(base64.b64decode(self.ui).decode('utf-8')))
            self.window_2=uic.loadUi(StringIO(base64.b64decode(self.itemui).decode('utf-8')))
            self.setIconWindow()

        self.setup_comboBoxes()
        self.setup_lineEdits()

            #self.window=uic.loadUi("main.ui")
        self.threadpool=QThreadPool()
        self.setup_external_worker()
        self.setup_buttons()
        self.setup_search()

        self.poller=QTimer(self)
        self.poller.timeout.connect(self.run_pollthread)
        self.poller.start(1000)
        self.setup_editor()
        self.load_settings()
        self.window.show()
        self.app.exec()
    ui=''''''
    icon='''{icondata}'''
    itemui='''PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHVpIHZlcnNpb249IjQuMCI+CiA8Y2xhc3M+RGlhbG9nPC9jbGFzcz4KIDx3aWRnZXQgY2xhc3M9IlFEaWFsb2ciIG5hbWU9IkRpYWxvZyI+CiAgPHByb3BlcnR5IG5hbWU9ImVuYWJsZWQiPgogICA8Ym9vbD50cnVlPC9ib29sPgogIDwvcHJvcGVydHk+CiAgPHByb3BlcnR5IG5hbWU9Imdlb21ldHJ5Ij4KICAgPHJlY3Q+CiAgICA8eD4wPC94PgogICAgPHk+MDwveT4KICAgIDx3aWR0aD4xMDMwPC93aWR0aD4KICAgIDxoZWlnaHQ+NzU4PC9oZWlnaHQ+CiAgIDwvcmVjdD4KICA8L3Byb3BlcnR5PgogIDxwcm9wZXJ0eSBuYW1lPSJ3aW5kb3dUaXRsZSI+CiAgIDxzdHJpbmc+SXRlbUVkaXRWaWV3PC9zdHJpbmc+CiAgPC9wcm9wZXJ0eT4KICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgIDxzdHJpbmc+SXRlbSBEYXRhPC9zdHJpbmc+CiAgPC9wcm9wZXJ0eT4KICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgPHN0cmluZz5JdGVtIERhdGE8L3N0cmluZz4KICA8L3Byb3BlcnR5PgogIDxwcm9wZXJ0eSBuYW1lPSJ3aGF0c1RoaXMiPgogICA8c3RyaW5nPkl0ZW0gRGF0YTwvc3RyaW5nPgogIDwvcHJvcGVydHk+CiAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgPHN0cmluZz5JdGVtIERhdGE8L3N0cmluZz4KICA8L3Byb3BlcnR5PgogIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICA8c3RyaW5nPkl0ZW0gRGF0YTwvc3RyaW5nPgogIDwvcHJvcGVydHk+CiAgPGxheW91dCBjbGFzcz0iUUdyaWRMYXlvdXQiIG5hbWU9ImdyaWRMYXlvdXQiPgogICA8aXRlbSByb3c9IjIiIGNvbHVtbj0iMCI+CiAgICA8d2lkZ2V0IGNsYXNzPSJRUHVzaEJ1dHRvbiIgbmFtZT0iYnJvd3NlX3FyX3NhdmVfbG9jYXRpb24iPgogICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgPHN0cmluZz5icm93c2Ugc2F2ZSBsb2NhdGlvbjwvc3RyaW5nPgogICAgIDwvcHJvcGVydHk+CiAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgIDxzdHJpbmc+YnJvd3NlIHNhdmUgbG9jYXRpb248L3N0cmluZz4KICAgICA8L3Byb3BlcnR5PgogICAgIDxwcm9wZXJ0eSBuYW1lPSJ3aGF0c1RoaXMiPgogICAgICA8c3RyaW5nPmJyb3dzZSBzYXZlIGxvY2F0aW9uPC9zdHJpbmc+CiAgICAgPC9wcm9wZXJ0eT4KICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICA8c3RyaW5nPmJyb3dzZSBzYXZlIGxvY2F0aW9uPC9zdHJpbmc+CiAgICAgPC9wcm9wZXJ0eT4KICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgPHN0cmluZz5icm93c2Ugc2F2ZSBsb2NhdGlvbjwvc3RyaW5nPgogICAgIDwvcHJvcGVydHk+CiAgICAgPHByb3BlcnR5IG5hbWU9InRleHQiPgogICAgICA8c3RyaW5nPkJyb3dzZTwvc3RyaW5nPgogICAgIDwvcHJvcGVydHk+CiAgICA8L3dpZGdldD4KICAgPC9pdGVtPgogICA8aXRlbSByb3c9IjAiIGNvbHVtbj0iMCIgY29sc3Bhbj0iNCI+CiAgICA8d2lkZ2V0IGNsYXNzPSJRVGFiV2lkZ2V0IiBuYW1lPSJ0YWJXaWRnZXQiPgogICAgIDxwcm9wZXJ0eSBuYW1lPSJjdXJyZW50SW5kZXgiPgogICAgICA8bnVtYmVyPjA8L251bWJlcj4KICAgICA8L3Byb3BlcnR5PgogICAgIDx3aWRnZXQgY2xhc3M9IlFXaWRnZXQiIG5hbWU9InRhYiI+CiAgICAgIDxhdHRyaWJ1dGUgbmFtZT0idGl0bGUiPgogICAgICAgPHN0cmluZz5JdGVtPC9zdHJpbmc+CiAgICAgIDwvYXR0cmlidXRlPgogICAgICA8bGF5b3V0IGNsYXNzPSJRR3JpZExheW91dCIgbmFtZT0iZ3JpZExheW91dF84Ij4KICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSIwIj4KICAgICAgICA8d2lkZ2V0IGNsYXNzPSJRV2lkZ2V0IiBuYW1lPSJhcmVhIiBuYXRpdmU9InRydWUiPgogICAgICAgICA8cHJvcGVydHkgbmFtZT0iZW5hYmxlZCI+CiAgICAgICAgICA8Ym9vbD5mYWxzZTwvYm9vbD4KICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgPGxheW91dCBjbGFzcz0iUUdyaWRMYXlvdXQiIG5hbWU9ImdyaWRMYXlvdXRfMiI+CiAgICAgICAgICA8aXRlbSByb3c9IjMiIGNvbHVtbj0iMSI+CiAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUVB1c2hCdXR0b24iIG5hbWU9InVwZGF0ZV9zZXJ2ZXIiPgogICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICA8c3RyaW5nPnVwZGF0ZSBvbiBzZXJ2ZXI8L3N0cmluZz4KICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICA8c3RyaW5nPnVwZGF0ZSBvbiBzZXJ2ZXI8L3N0cmluZz4KICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICA8c3RyaW5nPnVwZGF0ZSBvbiBzZXJ2ZXI8L3N0cmluZz4KICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgIDxzdHJpbmc+dXBkYXRlIG9uIHNlcnZlcjwvc3RyaW5nPgogICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgIDxzdHJpbmc+dXBkYXRlIG9uIHNlcnZlcjwvc3RyaW5nPgogICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idGV4dCI+CiAgICAgICAgICAgICA8c3RyaW5nPlVwZGF0ZTwvc3RyaW5nPgogICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgPC9pdGVtPgogICAgICAgICAgPGl0ZW0gcm93PSIzIiBjb2x1bW49IjAiPgogICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFQdXNoQnV0dG9uIiBuYW1lPSJkZWxldGVfaXRlbSI+CiAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgIDxzdHJpbmc+ZGVsZXRlIGl0ZW0gaW4gaW52ZW50b3J5PC9zdHJpbmc+CiAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgPHN0cmluZz5kZWxldGUgaXRlbSBpbiBpbnZlbnRvcnk8L3N0cmluZz4KICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICA8c3RyaW5nPmRlbGV0ZSBpdGVtIGluIGludmVudG9yeTwvc3RyaW5nPgogICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgPHN0cmluZz5kZWxldGUgaXRlbSBpbiBpbnZlbnRvcnk8L3N0cmluZz4KICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICA8c3RyaW5nPmRlbGV0ZSBpdGVtIGluIGludmVudG9yeTwvc3RyaW5nPgogICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idGV4dCI+CiAgICAgICAgICAgICA8c3RyaW5nPkRlbGV0ZSBJdGVtPC9zdHJpbmc+CiAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICA8L2l0ZW0+CiAgICAgICAgICA8aXRlbSByb3c9IjIiIGNvbHVtbj0iMCIgY29sc3Bhbj0iMiI+CiAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUVNjcm9sbEFyZWEiIG5hbWU9InNjcm9sbEFyZWEiPgogICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2lkZ2V0UmVzaXphYmxlIj4KICAgICAgICAgICAgIDxib29sPnRydWU8L2Jvb2w+CiAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFXaWRnZXQiIG5hbWU9InNjcm9sbEFyZWFXaWRnZXRDb250ZW50cyI+CiAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iZ2VvbWV0cnkiPgogICAgICAgICAgICAgIDxyZWN0PgogICAgICAgICAgICAgICA8eD4wPC94PgogICAgICAgICAgICAgICA8eT4wPC95PgogICAgICAgICAgICAgICA8d2lkdGg+OTYxPC93aWR0aD4KICAgICAgICAgICAgICAgPGhlaWdodD41OTI8L2hlaWdodD4KICAgICAgICAgICAgICA8L3JlY3Q+CiAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgPGxheW91dCBjbGFzcz0iUUdyaWRMYXlvdXQiIG5hbWU9ImdyaWRMYXlvdXRfMyI+CiAgICAgICAgICAgICAgPGl0ZW0gcm93PSI0IiBjb2x1bW49IjIiIGNvbHNwYW49IjciPgogICAgICAgICAgICAgICA8d2lkZ2V0IGNsYXNzPSJRR3JvdXBCb3giIG5hbWU9Imdyb3VwQm94Ij4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5FbmdyYXZpbmcgWmlwPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPGxheW91dCBjbGFzcz0iUUdyaWRMYXlvdXQiIG5hbWU9ImdyaWRMYXlvdXRfNCI+CiAgICAgICAgICAgICAgICAgPGl0ZW0gcm93PSIwIiBjb2x1bW49IjAiPgogICAgICAgICAgICAgICAgICA8d2lkZ2V0IGNsYXNzPSJRQ29tYm9Cb3giIG5hbWU9ImN1c3RvbV9lbmdyYXZlZCI+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5jdXN0b21fZW5ncmF2ZWQ8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmN1c3RvbV9lbmdyYXZlZDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ3aGF0c1RoaXMiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+Y3VzdG9tX2VuZ3JhdmVkPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmN1c3RvbV9lbmdyYXZlZDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+Y3VzdG9tX2VuZ3JhdmVkPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICA8L3dpZGdldD4KICAgICAgICAgICAgICAgICA8L2l0ZW0+CiAgICAgICAgICAgICAgICAgPGl0ZW0gcm93PSIwIiBjb2x1bW49IjEiPgogICAgICAgICAgICAgICAgICA8d2lkZ2V0IGNsYXNzPSJRTGluZUVkaXQiIG5hbWU9ImVuZ3JhdmluZ196aXAiPgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRvb2xUaXAiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+ZW5ncmF2aW5nX3ppcDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+ZW5ncmF2aW5nX3ppcDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ3aGF0c1RoaXMiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+ZW5ncmF2aW5nX3ppcDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlTmFtZSI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5lbmdyYXZpbmdfemlwPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5lbmdyYXZpbmdfemlwPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImRyYWdFbmFibGVkIj4KICAgICAgICAgICAgICAgICAgICA8Ym9vbD50cnVlPC9ib29sPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJwbGFjZWhvbGRlclRleHQiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+ZW5ncmF2aW5nLnppcDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJjbGVhckJ1dHRvbkVuYWJsZWQiPgogICAgICAgICAgICAgICAgICAgIDxib29sPnRydWU8L2Jvb2w+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICA8L3dpZGdldD4KICAgICAgICAgICAgICAgICA8L2l0ZW0+CiAgICAgICAgICAgICAgICAgPGl0ZW0gcm93PSIwIiBjb2x1bW49IjQiPgogICAgICAgICAgICAgICAgICA8d2lkZ2V0IGNsYXNzPSJRUHVzaEJ1dHRvbiIgbmFtZT0idXBkYXRlX2VuZ3JhdmluZ196aXAiPgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRleHQiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+dXBkYXRlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICA8L3dpZGdldD4KICAgICAgICAgICAgICAgICA8L2l0ZW0+CiAgICAgICAgICAgICAgICAgPGl0ZW0gcm93PSIwIiBjb2x1bW49IjMiPgogICAgICAgICAgICAgICAgICA8d2lkZ2V0IGNsYXNzPSJRUHVzaEJ1dHRvbiIgbmFtZT0iZW5ncmF2aW5nX3ppcF9kb3dubG9hZCI+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5Eb3dubG9hZDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSIyIj4KICAgICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUVB1c2hCdXR0b24iIG5hbWU9ImJyb3dzZV9lbmdyYXZpbmdfemlwIj4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+YnJvd3NlIGVuZ3JhdmluZyB6aXA8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmJyb3dzZSBlbmdyYXZpbmcgemlwPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmJyb3dzZSBlbmdyYXZpbmcgemlwPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5icm93c2UgZW5ncmF2aW5nIHppcDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPkJyb3dzZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSI1Ij4KICAgICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUVB1c2hCdXR0b24iIG5hbWU9ImRlbGV0ZV9lbmdyYXZpbmdfemlwIj4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmRlbGV0ZSBlbmdyYXZpbmcgemlwPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5kZWxldGUgZW5ncmF2aW5nIHppcDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ3aGF0c1RoaXMiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+ZGVsZXRlIGVuZ3JhdmluZyB6aXA8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+ZGVsZXRlIGVuZ3JhdmluZyB6aXA8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmRlbGV0ZSBlbmdyYXZpbmcgemlwPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRleHQiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+RGVsZXRlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICA8L3dpZGdldD4KICAgICAgICAgICAgICAgICA8L2l0ZW0+CiAgICAgICAgICAgICAgICA8L2xheW91dD4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iNiIgY29sdW1uPSIyIiBjb2xzcGFuPSI3Ij4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUdyb3VwQm94IiBuYW1lPSJncm91cEJveF80Ij4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5Db3JuZXI8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8bGF5b3V0IGNsYXNzPSJRR3JpZExheW91dCIgbmFtZT0iZ3JpZExheW91dF81Ij4KICAgICAgICAgICAgICAgICA8aXRlbSByb3c9IjAiIGNvbHVtbj0iMyI+CiAgICAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFQdXNoQnV0dG9uIiBuYW1lPSJ1cGRhdGVfY29ybmVyIj4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPnVwZGF0ZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSIwIj4KICAgICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUxpbmVFZGl0IiBuYW1lPSJjb3JuZXIiPgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRvb2xUaXAiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+YnJvd3NlIGNvcm5lciBmaWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5icm93c2UgY29ybmVyIGZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmJyb3dzZSBjb3JuZXIgZmlsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlTmFtZSI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5icm93c2UgY29ybmVyIGZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmJyb3dzZSBjb3JuZXIgZmlsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJkcmFnRW5hYmxlZCI+CiAgICAgICAgICAgICAgICAgICAgPGJvb2w+dHJ1ZTwvYm9vbD4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0icGxhY2Vob2xkZXJUZXh0Ij4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmNvcm5lci5maWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImNsZWFyQnV0dG9uRW5hYmxlZCI+CiAgICAgICAgICAgICAgICAgICAgPGJvb2w+dHJ1ZTwvYm9vbD4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICAgICA8aXRlbSByb3c9IjAiIGNvbHVtbj0iMSI+CiAgICAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFQdXNoQnV0dG9uIiBuYW1lPSJicm93c2VfY29ybmVyIj4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmJyb3dzZSBjb3JuZXIgZmlsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+YnJvd3NlIGNvcm5lciBmaWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5icm93c2UgY29ybmVyIGZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+YnJvd3NlIGNvcm5lciBmaWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5icm93c2UgY29ybmVyIGZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5Ccm93c2U8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICAgICA8aXRlbSByb3c9IjAiIGNvbHVtbj0iMiI+CiAgICAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFQdXNoQnV0dG9uIiBuYW1lPSJjb3JuZXJfZG93bmxvYWQiPgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRleHQiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+RG93bmxvYWQ8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICAgICA8aXRlbSByb3c9IjAiIGNvbHVtbj0iNCI+CiAgICAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFQdXNoQnV0dG9uIiBuYW1lPSJkZWxldGVfY29ybmVyIj4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmRlbGV0ZSBjb3JuZXI8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmRlbGV0ZSBjb3JuZXI8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmRlbGV0ZSBjb3JuZXI8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+ZGVsZXRlIGNvcm5lcjwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+ZGVsZXRlIGNvcm5lcjwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPkRlbGV0ZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgICAgPC9sYXlvdXQ+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjAiIGNvbHVtbj0iMiI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFDb21ib0JveCIgbmFtZT0iY2FuX2hvbGRfZ2xhc3MiPgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRvb2xUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+Y2FuIGhvbGQgZ2xhc3M8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmNhbiBob2xkIGdsYXNzPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5jYW4gaG9sZCBnbGFzczwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlTmFtZSI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5jYW4gaG9sZCBnbGFzczwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+Y2FuIGhvbGQgZ2xhc3M8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjEiIGNvbHVtbj0iMCI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFDb21ib0JveCIgbmFtZT0iZnJvbnRfb3V0ZXJfcHJvZmlsZSI+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5mcm9udCBvdXRlciBwcm9maWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5mcm9udCBvdXRlciBwcm9maWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5mcm9udCBvdXRlciBwcm9maWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmZyb250IG91dGVyIHByb2ZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmZyb250IG91dGVyIHByb2ZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjAiIGNvbHVtbj0iMSI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFDb21ib0JveCIgbmFtZT0ic2l6ZSI+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5zaXplPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5zaXplPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5zaXplPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnNpemU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnNpemU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjEiIGNvbHVtbj0iMSI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFDb21ib0JveCIgbmFtZT0iZnJvbnRfaW5uZXJfcHJvZmlsZSI+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5mcm9udCBpbm5lciBwcm9maWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5mcm9udCBpbm5lciBwcm9maWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5mcm9udCBpbm5lciBwcm9maWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmZyb250IGlubmVyIHByb2ZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmZyb250IGlubmVyIHByb2ZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjEiIGNvbHVtbj0iMiI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFDb21ib0JveCIgbmFtZT0icmVhcl9pbm5lcl9wcm9maWxlIj4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnJlYXIgaW5uZXIgcHJvZmlsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+cmVhciBpbm5lciBwcm9maWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5yZWFyIGlubmVyIHByb2ZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+cmVhciBpbm5lciBwcm9maWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5yZWFyIGlubmVyIHByb2ZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjQiIGNvbHVtbj0iMCIgcm93c3Bhbj0iNCIgY29sc3Bhbj0iMiI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFQbGFpblRleHRFZGl0IiBuYW1lPSJjb21tZW50cyI+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5jb21tZW50czwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+Y29tbWVudHM8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmNvbW1lbnRzPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmNvbW1lbnRzPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5jb21tZW50czwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0YWJDaGFuZ2VzRm9jdXMiPgogICAgICAgICAgICAgICAgIDxib29sPnRydWU8L2Jvb2w+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InBsYWNlaG9sZGVyVGV4dCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5jb21tZW50czwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iNyIgY29sdW1uPSIyIiBjb2xzcGFuPSI3Ij4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUdyb3VwQm94IiBuYW1lPSJncm91cEJveF8zIj4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5Gcm9udDwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxsYXlvdXQgY2xhc3M9IlFHcmlkTGF5b3V0IiBuYW1lPSJncmlkTGF5b3V0XzciPgogICAgICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSIxIj4KICAgICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUVB1c2hCdXR0b24iIG5hbWU9ImJyb3dzZV9mcm9udCI+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5icm93c2UgZnJvbnQgZmlsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+YnJvd3NlIGZyb250IGZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmJyb3dzZSBmcm9udCBmaWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmJyb3dzZSBmcm9udCBmaWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5icm93c2UgZnJvbnQgZmlsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPkJyb3dzZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSIwIj4KICAgICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUxpbmVFZGl0IiBuYW1lPSJmcm9udCI+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5mcm9udDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+ZnJvbnQ8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmZyb250PC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmZyb250PC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5mcm9udDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJkcmFnRW5hYmxlZCI+CiAgICAgICAgICAgICAgICAgICAgPGJvb2w+dHJ1ZTwvYm9vbD4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0icGxhY2Vob2xkZXJUZXh0Ij4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmZyb250LmZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iY2xlYXJCdXR0b25FbmFibGVkIj4KICAgICAgICAgICAgICAgICAgICA8Ym9vbD50cnVlPC9ib29sPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSIzIj4KICAgICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUVB1c2hCdXR0b24iIG5hbWU9InVwZGF0ZV9mcm9udCI+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz51cGRhdGU8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICAgICA8aXRlbSByb3c9IjAiIGNvbHVtbj0iMiI+CiAgICAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFQdXNoQnV0dG9uIiBuYW1lPSJmcm9udF9kb3dubG9hZCI+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5Eb3dubG9hZDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSI0Ij4KICAgICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUVB1c2hCdXR0b24iIG5hbWU9ImRlbGV0ZV9mcm9udCI+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5kZWxldGUgZnJvbnQ8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmRlbGV0ZSBmcm9udDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ3aGF0c1RoaXMiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+ZGVsZXRlIGZyb250PC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmRlbGV0ZSBmcm9udDwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+ZGVsZXRlIGZyb250PC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRleHQiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+RGVsZXRlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICA8L3dpZGdldD4KICAgICAgICAgICAgICAgICA8L2l0ZW0+CiAgICAgICAgICAgICAgICA8L2xheW91dD4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iNSIgY29sdW1uPSIyIiBjb2xzcGFuPSI3Ij4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUdyb3VwQm94IiBuYW1lPSJncm91cEJveF8yIj4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0aXRsZSI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5SZWFyPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPGxheW91dCBjbGFzcz0iUUdyaWRMYXlvdXQiIG5hbWU9ImdyaWRMYXlvdXRfNiI+CiAgICAgICAgICAgICAgICAgPGl0ZW0gcm93PSIwIiBjb2x1bW49IjMiPgogICAgICAgICAgICAgICAgICA8d2lkZ2V0IGNsYXNzPSJRUHVzaEJ1dHRvbiIgbmFtZT0idXBkYXRlX3JlYXIiPgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRleHQiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+dXBkYXRlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICA8L3dpZGdldD4KICAgICAgICAgICAgICAgICA8L2l0ZW0+CiAgICAgICAgICAgICAgICAgPGl0ZW0gcm93PSIwIiBjb2x1bW49IjEiPgogICAgICAgICAgICAgICAgICA8d2lkZ2V0IGNsYXNzPSJRUHVzaEJ1dHRvbiIgbmFtZT0iYnJvd3NlX3JlYXIiPgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5icm93c2UgcmVhciBmaWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5icm93c2UgcmVhciBmaWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmJyb3dzZSByZWFyIGZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmJyb3dzZSByZWFyIGZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5Ccm93c2U8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICAgICA8aXRlbSByb3c9IjAiIGNvbHVtbj0iMCI+CiAgICAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFMaW5lRWRpdCIgbmFtZT0icmVhciI+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5yZWFyPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5yZWFyPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5yZWFyPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPnJlYXI8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPnJlYXI8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iZHJhZ0VuYWJsZWQiPgogICAgICAgICAgICAgICAgICAgIDxib29sPnRydWU8L2Jvb2w+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InBsYWNlaG9sZGVyVGV4dCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5yZWFyLmZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iY2xlYXJCdXR0b25FbmFibGVkIj4KICAgICAgICAgICAgICAgICAgICA8Ym9vbD50cnVlPC9ib29sPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSIyIj4KICAgICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUVB1c2hCdXR0b24iIG5hbWU9InJlYXJfZG93bmxvYWQiPgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRleHQiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+RG93bmxvYWQ8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICAgICA8aXRlbSByb3c9IjAiIGNvbHVtbj0iNCI+CiAgICAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFQdXNoQnV0dG9uIiBuYW1lPSJkZWxldGVfcmVhciI+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5kZWxldGUgcmVhcjwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgICAgIDxzdHJpbmc+ZGVsZXRlIHJlYXI8L3N0cmluZz4KICAgICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmRlbGV0ZSByZWFyPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPmRlbGV0ZSByZWFyPC9zdHJpbmc+CiAgICAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHN0cmluZz5kZWxldGUgcmVhcjwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgICA8c3RyaW5nPkRlbGV0ZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgICAgPC9sYXlvdXQ+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjAiIGNvbHVtbj0iMCI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFDb21ib0JveCIgbmFtZT0icHJvZHVjdF90eXBlIj4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnByb2R1Y3QgdHlwZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+cHJvZHVjdCB0eXBlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5wcm9kdWN0IHR5cGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+cHJvZHVjdCB0eXBlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5wcm9kdWN0IHR5cGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjgiIGNvbHVtbj0iMCI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFEb3VibGVTcGluQm94IiBuYW1lPSJpdGVtX3dlaWdodCI+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5pdGVtX3dlaWdodDwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+aXRlbV93ZWlnaHQ8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPml0ZW1fd2VpZ2h0PC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPml0ZW1fd2VpZ2h0PC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5pdGVtX3dlaWdodDwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJtYXhpbXVtIj4KICAgICAgICAgICAgICAgICA8ZG91YmxlPjEwMDAwMC4wMDAwMDAwMDAwMDAwMDA8L2RvdWJsZT4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ic2luZ2xlU3RlcCI+CiAgICAgICAgICAgICAgICAgPGRvdWJsZT4wLjAxMDAwMDAwMDAwMDAwMDwvZG91YmxlPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iOCIgY29sdW1uPSIxIj4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUNvbWJvQm94IiBuYW1lPSJpdGVtX3dlaWdodF91bml0Ij4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPml0ZW1fd2VpZ2h0X3VuaXQ8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPml0ZW1fd2VpZ2h0X3VuaXQ8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPml0ZW1fd2VpZ2h0X3VuaXQ8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+aXRlbV93ZWlnaHRfdW5pdDwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+aXRlbV93ZWlnaHRfdW5pdDwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iOCIgY29sdW1uPSIyIj4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUURvdWJsZVNwaW5Cb3giIG5hbWU9InByaWNlIj4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnByaWNlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5wcmljZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ3aGF0c1RoaXMiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+cHJpY2U8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+cHJpY2U8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnByaWNlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9Im1heGltdW0iPgogICAgICAgICAgICAgICAgIDxkb3VibGU+MTAwMDAwLjAwMDAwMDAwMDAwMDAwMDwvZG91YmxlPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzaW5nbGVTdGVwIj4KICAgICAgICAgICAgICAgICA8ZG91YmxlPjAuMDEwMDAwMDAwMDAwMDAwPC9kb3VibGU+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICA8L3dpZGdldD4KICAgICAgICAgICAgICA8L2l0ZW0+CiAgICAgICAgICAgICAgPGl0ZW0gcm93PSI4IiBjb2x1bW49IjMiPgogICAgICAgICAgICAgICA8d2lkZ2V0IGNsYXNzPSJRRG91YmxlU3BpbkJveCIgbmFtZT0ib3RoZXJfZnJhbWVfc2l6ZV9kaWFtZXRlciI+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5vdGhlcl9mcmFtZV9zaXplX2RpYW1ldGVyPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5vdGhlcl9mcmFtZV9zaXplX2RpYW1ldGVyPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5vdGhlcl9mcmFtZV9zaXplX2RpYW1ldGVyPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPm90aGVyX2ZyYW1lX3NpemVfZGlhbWV0ZXI8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPm90aGVyX2ZyYW1lX3NpemVfZGlhbWV0ZXI8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ibWF4aW11bSI+CiAgICAgICAgICAgICAgICAgPGRvdWJsZT4xMDAwMDAwLjAwMDAwMDAwMDAwMDAwMDwvZG91YmxlPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iOCIgY29sdW1uPSI0Ij4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUNvbWJvQm94IiBuYW1lPSJvdGhlcl9mcmFtZV9zaXplX2RpYW1ldGVyX3VuaXQiPgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRvb2xUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+b3RoZXJfZnJhbWVfc2l6ZV9kaWFtZXRlcl91bml0PC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5vdGhlcl9mcmFtZV9zaXplX2RpYW1ldGVyX3VuaXQ8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPm90aGVyX2ZyYW1lX3NpemVfZGlhbWV0ZXJfdW5pdDwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlTmFtZSI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5vdGhlcl9mcmFtZV9zaXplX2RpYW1ldGVyX3VuaXQ8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPm90aGVyX2ZyYW1lX3NpemVfZGlhbWV0ZXJfdW5pdDwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iMSIgY29sdW1uPSIzIj4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUNvbWJvQm94IiBuYW1lPSJjZW50ZXJfaW5uZXJfcHJvZmlsZSI+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5jZW50ZXIgaW5uZXIgcHJvZmlsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+Y2VudGVyIGlubmVyIHByb2ZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmNlbnRlciBpbm5lciBwcm9maWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmNlbnRlciBpbm5lciBwcm9maWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5jZW50ZXIgaW5uZXIgcHJvZmlsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSIzIj4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUNvbWJvQm94IiBuYW1lPSJoYXNfZ2xhc3MiPgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRvb2xUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+aGFzIGdsYXNzPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5oYXMgZ2xhc3M8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmhhcyBnbGFzczwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlTmFtZSI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5oYXMgZ2xhc3M8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmhhcyBnbGFzczwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSI0Ij4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUNvbWJvQm94IiBuYW1lPSJjYW5faG9sZF9jYW52YXMiPgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRvb2xUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+Y2FuIGhvbGQgY2FudmFzPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5jYW4gaG9sZCBjYW52YXM8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmNhbiBob2xkIGNhbnZhczwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlTmFtZSI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5jYW4gaG9sZCBjYW52YXM8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmNhbiBob2xkIGNhbnZhczwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSI1Ij4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUNvbWJvQm94IiBuYW1lPSJoYXNfY2FudmFzIj4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmhhcyBjYW52YXM8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmhhcyBjYW52YXM8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmhhcyBjYW52YXM8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+aGFzIGNhbnZhczwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+aGFzIGNhbnZhczwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSI2Ij4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUNvbWJvQm94IiBuYW1lPSJvcmllbnRhdGlvbiI+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5vcmllbnRhdGlvbjwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+b3JpZW50YXRpb248L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPm9yaWVudGF0aW9uPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPm9yaWVudGF0aW9uPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5vcmllbnRhdGlvbjwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSI3Ij4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUNvbWJvQm94IiBuYW1lPSJ3b29kX3R5cGUiPgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRvb2xUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+d29vZCB0eXBlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz53b29kIHR5cGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPndvb2QgdHlwZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlTmFtZSI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz53b29kIHR5cGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPndvb2QgdHlwZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iMCIgY29sdW1uPSI4Ij4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUNvbWJvQm94IiBuYW1lPSJmcmFtZV9zaGFwZSI+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5mcmFtZV9zaGFwZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+ZnJhbWVfc2hhcGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmZyYW1lX3NoYXBlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmZyYW1lX3NoYXBlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5mcmFtZV9zaGFwZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iMTEiIGNvbHVtbj0iMSIgY29sc3Bhbj0iOCI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFMaW5lRWRpdCIgbmFtZT0ic2t1Ij4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnNrdTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+c2t1PC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5za3U8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+c2t1PC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5za3U8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iZHJhZ0VuYWJsZWQiPgogICAgICAgICAgICAgICAgIDxib29sPnRydWU8L2Jvb2w+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InBsYWNlaG9sZGVyVGV4dCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5za3U8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iY2xlYXJCdXR0b25FbmFibGVkIj4KICAgICAgICAgICAgICAgICA8Ym9vbD50cnVlPC9ib29sPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iMTEiIGNvbHVtbj0iMCI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFQdXNoQnV0dG9uIiBuYW1lPSJuZXdfc2t1Ij4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmdlbmVyYXRlIGEgbmV3IHNrdTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+Z2VuZXJhdGUgYSBuZXcgc2t1PC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5nZW5lcmF0ZSBhIG5ldyBza3U8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+Z2VuZXJhdGUgYSBuZXcgc2t1PC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5nZW5lcmF0ZSBhIG5ldyBza3U8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idGV4dCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5OZXcgU0tVPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICA8L3dpZGdldD4KICAgICAgICAgICAgICA8L2l0ZW0+CiAgICAgICAgICAgICAgPGl0ZW0gcm93PSIxMCIgY29sdW1uPSIxIiBjb2xzcGFuPSI4Ij4KICAgICAgICAgICAgICAgPHdpZGdldCBjbGFzcz0iUUxpbmVFZGl0IiBuYW1lPSJzb2xkX3RvIj4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnNvbGQgdG88L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnNvbGQgdG88L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnNvbGQgdG88L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+c29sZCB0bzwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+c29sZCB0bzwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJkcmFnRW5hYmxlZCI+CiAgICAgICAgICAgICAgICAgPGJvb2w+dHJ1ZTwvYm9vbD4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0icGxhY2Vob2xkZXJUZXh0Ij4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnNvbGQgdG88L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iY2xlYXJCdXR0b25FbmFibGVkIj4KICAgICAgICAgICAgICAgICA8Ym9vbD50cnVlPC9ib29sPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgPC93aWRnZXQ+CiAgICAgICAgICAgICAgPC9pdGVtPgogICAgICAgICAgICAgIDxpdGVtIHJvdz0iMTAiIGNvbHVtbj0iMCI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFDb21ib0JveCIgbmFtZT0ic29sZCI+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5zb2xkPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5zb2xkPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5zb2xkPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnNvbGQ8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnNvbGQ8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjEiIGNvbHVtbj0iNCI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFDb21ib0JveCIgbmFtZT0iY2VudGVyX291dGVyX3Byb2ZpbGUiPgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRvb2xUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+Y2VudGVyIG91dGVyIHByb2ZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmNlbnRlciBvdXRlciBwcm9maWxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5jZW50ZXIgb3V0ZXIgcHJvZmlsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlTmFtZSI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5jZW50ZXIgb3V0ZXIgcHJvZmlsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+Y2VudGVyIG91dGVyIHByb2ZpbGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjEiIGNvbHVtbj0iNSI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFDb21ib0JveCIgbmFtZT0iZmluaXNoX3R5cGUiPgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRvb2xUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+ZmluaXNoIHR5cGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmZpbmlzaCB0eXBlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5maW5pc2ggdHlwZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlTmFtZSI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5maW5pc2ggdHlwZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+ZmluaXNoIHR5cGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjEiIGNvbHVtbj0iNiI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFDb21ib0JveCIgbmFtZT0ic3RhY2thYmxlIj4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnN0YWNrYWJsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+c3RhY2thYmxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5zdGFja2FibGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+c3RhY2thYmxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5zdGFja2FibGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjkiIGNvbHVtbj0iMSIgY29sc3Bhbj0iOCI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFMaW5lRWRpdCIgbmFtZT0ic3RhaW4iPgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRvb2xUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+c3RhaW48L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnN0YWluPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5zdGFpbjwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlTmFtZSI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5zdGFpbjwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+c3RhaW48L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iZHJhZ0VuYWJsZWQiPgogICAgICAgICAgICAgICAgIDxib29sPnRydWU8L2Jvb2w+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InBsYWNlaG9sZGVyVGV4dCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5zdGFpbjwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJjbGVhckJ1dHRvbkVuYWJsZWQiPgogICAgICAgICAgICAgICAgIDxib29sPnRydWU8L2Jvb2w+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICA8L3dpZGdldD4KICAgICAgICAgICAgICA8L2l0ZW0+CiAgICAgICAgICAgICAgPGl0ZW0gcm93PSI5IiBjb2x1bW49IjAiPgogICAgICAgICAgICAgICA8d2lkZ2V0IGNsYXNzPSJRQ29tYm9Cb3giIG5hbWU9InN0YWluYWJsZSI+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5zdGFpbmFibGU8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnN0YWluYWJsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ3aGF0c1RoaXMiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+c3RhaW5hYmxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPnN0YWluYWJsZTwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+c3RhaW5hYmxlPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICA8L3dpZGdldD4KICAgICAgICAgICAgICA8L2l0ZW0+CiAgICAgICAgICAgICAgPGl0ZW0gcm93PSI4IiBjb2x1bW49IjUiPgogICAgICAgICAgICAgICA8d2lkZ2V0IGNsYXNzPSJRQ29tYm9Cb3giIG5hbWU9InBhaWRfZm9yIj4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPndhcyBpdCBwYWlkIGZvcjwvc3RyaW5nPgogICAgICAgICAgICAgICAgPC9wcm9wZXJ0eT4KICAgICAgICAgICAgICAgIDxwcm9wZXJ0eSBuYW1lPSJzdGF0dXNUaXAiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+d2FzIGl0IHBhaWQgZm9yPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz53YXMgaXQgcGFpZCBmb3I8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICAgICAgICAgICAgIDxzdHJpbmc+d2FzIGl0IHBhaWQgZm9yPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVEZXNjcmlwdGlvbiI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz53YXMgaXQgcGFpZCBmb3I8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgICA8aXRlbSByb3c9IjgiIGNvbHVtbj0iNiI+CiAgICAgICAgICAgICAgIDx3aWRnZXQgY2xhc3M9IlFEb3VibGVTcGluQm94IiBuYW1lPSJhbW91bnRfcGFpZCI+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5hbW91bnQgcGFpZCB3aXRoPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9InN0YXR1c1RpcCI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5hbW91bnQgcGFpZCB3aXRoPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgICAgICAgICAgICAgPHN0cmluZz5hbW91bnQgcGFpZCB3aXRoPC9zdHJpbmc+CiAgICAgICAgICAgICAgICA8L3Byb3BlcnR5PgogICAgICAgICAgICAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmFtb3VudCBwYWlkIHdpdGg8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZURlc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICA8c3RyaW5nPmFtb3VudCBwYWlkIHdpdGg8L3N0cmluZz4KICAgICAgICAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgICAgICAgIDwvd2lkZ2V0PgogICAgICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgICAgIDwvbGF5b3V0PgogICAgICAgICAgICA8L3dpZGdldD4KICAgICAgICAgICA8L3dpZGdldD4KICAgICAgICAgIDwvaXRlbT4KICAgICAgICAgPC9sYXlvdXQ+CiAgICAgICAgPC93aWRnZXQ+CiAgICAgICA8L2l0ZW0+CiAgICAgICA8aXRlbSByb3c9IjEiIGNvbHVtbj0iMCI+CiAgICAgICAgPHdpZGdldCBjbGFzcz0iUUNoZWNrQm94IiBuYW1lPSJlZGl0Ij4KICAgICAgICAgPHByb3BlcnR5IG5hbWU9InRleHQiPgogICAgICAgICAgPHN0cmluZz5FZGl0PC9zdHJpbmc+CiAgICAgICAgIDwvcHJvcGVydHk+CiAgICAgICAgPC93aWRnZXQ+CiAgICAgICA8L2l0ZW0+CiAgICAgIDwvbGF5b3V0PgogICAgIDwvd2lkZ2V0PgogICAgIDx3aWRnZXQgY2xhc3M9IlFXaWRnZXQiIG5hbWU9InRhYl8yIj4KICAgICAgPGF0dHJpYnV0ZSBuYW1lPSJ0aXRsZSI+CiAgICAgICA8c3RyaW5nPkFzUVI8L3N0cmluZz4KICAgICAgPC9hdHRyaWJ1dGU+CiAgICAgIDxsYXlvdXQgY2xhc3M9IlFHcmlkTGF5b3V0IiBuYW1lPSJncmlkTGF5b3V0XzkiPgogICAgICAgPGl0ZW0gcm93PSIwIiBjb2x1bW49IjAiPgogICAgICAgIDx3aWRnZXQgY2xhc3M9IlFHcmFwaGljc1ZpZXciIG5hbWU9ImFzX3ZpZXciLz4KICAgICAgIDwvaXRlbT4KICAgICAgPC9sYXlvdXQ+CiAgICAgPC93aWRnZXQ+CiAgICA8L3dpZGdldD4KICAgPC9pdGVtPgogICA8aXRlbSByb3c9IjEiIGNvbHVtbj0iMCIgY29sc3Bhbj0iNCI+CiAgICA8d2lkZ2V0IGNsYXNzPSJRTGluZUVkaXQiIG5hbWU9InFyX3NhdmVfbG9jYXRpb24iPgogICAgIDxwcm9wZXJ0eSBuYW1lPSJ0b29sVGlwIj4KICAgICAgPHN0cmluZz53aGVyZSB0byBzYXZlIHRoZSBnZW5lcmF0ZWQgUVJDb2RlPC9zdHJpbmc+CiAgICAgPC9wcm9wZXJ0eT4KICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgPHN0cmluZz53aGVyZSB0byBzYXZlIHRoZSBnZW5lcmF0ZWQgUVJDb2RlPC9zdHJpbmc+CiAgICAgPC9wcm9wZXJ0eT4KICAgICA8cHJvcGVydHkgbmFtZT0id2hhdHNUaGlzIj4KICAgICAgPHN0cmluZz53aGVyZSB0byBzYXZlIHRoZSBnZW5lcmF0ZWQgUVJDb2RlPC9zdHJpbmc+CiAgICAgPC9wcm9wZXJ0eT4KICAgICA8cHJvcGVydHkgbmFtZT0iYWNjZXNzaWJsZU5hbWUiPgogICAgICA8c3RyaW5nPndoZXJlIHRvIHNhdmUgdGhlIGdlbmVyYXRlZCBRUkNvZGU8L3N0cmluZz4KICAgICA8L3Byb3BlcnR5PgogICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICA8c3RyaW5nPndoZXJlIHRvIHNhdmUgdGhlIGdlbmVyYXRlZCBRUkNvZGU8L3N0cmluZz4KICAgICA8L3Byb3BlcnR5PgogICAgIDxwcm9wZXJ0eSBuYW1lPSJ0ZXh0Ij4KICAgICAgPHN0cmluZz5pdGVtX3FyY29kZV97c2t1fS5wbmc8L3N0cmluZz4KICAgICA8L3Byb3BlcnR5PgogICAgIDxwcm9wZXJ0eSBuYW1lPSJkcmFnRW5hYmxlZCI+CiAgICAgIDxib29sPnRydWU8L2Jvb2w+CiAgICAgPC9wcm9wZXJ0eT4KICAgICA8cHJvcGVydHkgbmFtZT0icGxhY2Vob2xkZXJUZXh0Ij4KICAgICAgPHN0cmluZz5XaGVyZSB0byBzYXZlIFFSQ29kZTwvc3RyaW5nPgogICAgIDwvcHJvcGVydHk+CiAgICAgPHByb3BlcnR5IG5hbWU9ImNsZWFyQnV0dG9uRW5hYmxlZCI+CiAgICAgIDxib29sPnRydWU8L2Jvb2w+CiAgICAgPC9wcm9wZXJ0eT4KICAgIDwvd2lkZ2V0PgogICA8L2l0ZW0+CiAgIDxpdGVtIHJvdz0iMiIgY29sdW1uPSIyIj4KICAgIDx3aWRnZXQgY2xhc3M9IlFQdXNoQnV0dG9uIiBuYW1lPSJjbG9zZU1lIj4KICAgICA8cHJvcGVydHkgbmFtZT0idG9vbFRpcCI+CiAgICAgIDxzdHJpbmc+Y2xvc2UgZGlhbG9nPC9zdHJpbmc+CiAgICAgPC9wcm9wZXJ0eT4KICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgPHN0cmluZz5jbG9zZSBkaWFsb2c8L3N0cmluZz4KICAgICA8L3Byb3BlcnR5PgogICAgIDxwcm9wZXJ0eSBuYW1lPSJ3aGF0c1RoaXMiPgogICAgICA8c3RyaW5nPmNsb3NlIGRpYWxvZzwvc3RyaW5nPgogICAgIDwvcHJvcGVydHk+CiAgICAgPHByb3BlcnR5IG5hbWU9ImFjY2Vzc2libGVOYW1lIj4KICAgICAgPHN0cmluZz5jbG9zZSBkaWFsb2c8L3N0cmluZz4KICAgICA8L3Byb3BlcnR5PgogICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICA8c3RyaW5nPmNsb3NlIGRpYWxvZzwvc3RyaW5nPgogICAgIDwvcHJvcGVydHk+CiAgICAgPHByb3BlcnR5IG5hbWU9InRleHQiPgogICAgICA8c3RyaW5nPkNsb3NlPC9zdHJpbmc+CiAgICAgPC9wcm9wZXJ0eT4KICAgIDwvd2lkZ2V0PgogICA8L2l0ZW0+CiAgIDxpdGVtIHJvdz0iMiIgY29sdW1uPSIxIj4KICAgIDx3aWRnZXQgY2xhc3M9IlFQdXNoQnV0dG9uIiBuYW1lPSJzYXZlX3FyY29kZSI+CiAgICAgPHByb3BlcnR5IG5hbWU9InRvb2xUaXAiPgogICAgICA8c3RyaW5nPnNhdmUgcXJjb2RlPC9zdHJpbmc+CiAgICAgPC9wcm9wZXJ0eT4KICAgICA8cHJvcGVydHkgbmFtZT0ic3RhdHVzVGlwIj4KICAgICAgPHN0cmluZz5zYXZlIHFyY29kZTwvc3RyaW5nPgogICAgIDwvcHJvcGVydHk+CiAgICAgPHByb3BlcnR5IG5hbWU9IndoYXRzVGhpcyI+CiAgICAgIDxzdHJpbmc+c2F2ZSBxcmNvZGU8L3N0cmluZz4KICAgICA8L3Byb3BlcnR5PgogICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlTmFtZSI+CiAgICAgIDxzdHJpbmc+c2F2ZSBxcmNvZGU8L3N0cmluZz4KICAgICA8L3Byb3BlcnR5PgogICAgIDxwcm9wZXJ0eSBuYW1lPSJhY2Nlc3NpYmxlRGVzY3JpcHRpb24iPgogICAgICA8c3RyaW5nPnNhdmUgcXJjb2RlPC9zdHJpbmc+CiAgICAgPC9wcm9wZXJ0eT4KICAgICA8cHJvcGVydHkgbmFtZT0idGV4dCI+CiAgICAgIDxzdHJpbmc+U2F2ZSBRUkNvZGU8L3N0cmluZz4KICAgICA8L3Byb3BlcnR5PgogICAgPC93aWRnZXQ+CiAgIDwvaXRlbT4KICA8L2xheW91dD4KIDwvd2lkZ2V0PgogPHJlc291cmNlcy8+CiA8Y29ubmVjdGlvbnM+CiAgPGNvbm5lY3Rpb24+CiAgIDxzZW5kZXI+Y2xvc2VNZTwvc2VuZGVyPgogICA8c2lnbmFsPmNsaWNrZWQoKTwvc2lnbmFsPgogICA8cmVjZWl2ZXI+RGlhbG9nPC9yZWNlaXZlcj4KICAgPHNsb3Q+Y2xvc2UoKTwvc2xvdD4KICAgPGhpbnRzPgogICAgPGhpbnQgdHlwZT0ic291cmNlbGFiZWwiPgogICAgIDx4Pjc0NTwveD4KICAgICA8eT42Mzc8L3k+CiAgICA8L2hpbnQ+CiAgICA8aGludCB0eXBlPSJkZXN0aW5hdGlvbmxhYmVsIj4KICAgICA8eD40OTc8L3g+CiAgICAgPHk+MzMwPC95PgogICAgPC9oaW50PgogICA8L2hpbnRzPgogIDwvY29ubmVjdGlvbj4KIDwvY29ubmVjdGlvbnM+CjwvdWk+Cg=='''
Window()
